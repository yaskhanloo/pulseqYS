import numpy as np
import math as math
import time

from pypulseq.Sequence.sequence import Sequence
from pypulseq.opts import Opts
from pypulseq.make_sinc_pulse import make_sinc_pulse
from pypulseq.make_adc import make_adc
from pypulseq.make_trapezoid import make_trapezoid
from pypulseq.make_block_pulse import make_block_pulse
from pypulseq.calc_duration import calc_duration
from pypulseq.split_gradient_at import split_gradient_at
from pypulseq.add_gradients import add_gradients

###############################################################
# Gradient modes
grad_mode = 'Normal'
if grad_mode == 'Fast':
    max_grad = 24
    max_slew = 180
elif grad_mode == 'Normal':
    max_grad = 22
    max_slew = 100
elif grad_mode == 'Whisper':
    max_grad = 22
    max_slew = 50
elif grad_mode == 'Performance':
    max_grad = 37
    max_slew = 188

###############################################################
# System limits
sys = Opts(max_grad  = max_grad, 
           grad_unit = 'mT/m', 
           max_slew  = max_slew, 
           slew_unit = 'T/m/s',
           rf_ringdown_time = 20e-6, 
           rf_dead_time     = 100e-6, 
           adc_dead_time    = 20e-6)

# ADC duration (controls TR/TE)
adc_dur = 2560/2  # [us]

###############################################################
# Sequence parameters
seq = Sequence()
enc = 'xyz'
fov = np.array([780e-3, 180e-3, 180e-3])
Nx = adc_dur / 2
Ny = 180
Nz = 60
thk = 3e-3 # resolution 1x1x3 mm


Nramp = 1000
alpha  = 15   # flip angle [degrees]
pc = np.arange(0, 360, 20)

# RF excitation parameters
rf_dur = 490  # [us]
rf_apo = 0.5
rf_bwt = 1.5  # time_bw_product

###############################################################
# Create slice selection pulse and gradient
rf, g_ss, __ = make_sinc_pulse(flip_angle = alpha * np.pi / 180, 
                               duration   = rf_dur * 1e-6, 
                               slice_thickness = thk,
                               apodization     = rf_apo, 
                               time_bw_product = rf_bwt,
                               system    = sys, 
                               return_gz = True)
g_ss.channel = enc[2]  #z direction

# Slice refocusing
g_ss_reph = make_trapezoid(channel=enc[2], system=system, area=-g_ss.area / 2, duration=0.00017 * 2)

# Update RF delay within block
rf.delay = calc_duration(g_ss) - calc_duration(rf) + rf.delay

###############################################################
# Readout gradient and ADC
delta_k = 1 / fov
kWidth  = Nx * delta_k[0]

# Readout and ADC
g_ro = make_trapezoid(channel=enc[0], flat_area=kWidth, flat_time=(adc_dur)* 1e-6, system=sys)
adc  = make_adc(num_samples=Nx, duration=g_ro.flat_time, delay=g_ro.rise_time, system=sys)

# Readout rewinder
g_ro_pre = make_trapezoid(channel=enc[0], area=(-1)*g_ro.area/2, system=sys)

# Areas for phase-encoding steps
phaseAreas_tmp = np.arange(0, Ny, 1).tolist()
phaseAreas = np.dot(np.subtract(phaseAreas_tmp, Ny / 2), delta_k)

###############################################################
# revise
prephase_min_dur = calc_duration(gx_pre)

gx_parts = split_gradient_at(gx, math.ceil(calc_duration(adc)/sys.grad_raster_time)*sys.grad_raster_time)

gx_parts[0].delay = calc_duration(gx_pre)
gx_1 = add_gradients([gx_pre, gx_parts[0]], system=sys)
adc.delay = adc.delay + calc_duration(gx_pre)

gx_parts[1].delay = 0
gx_2 = add_gradients([gx_parts[1], gx_pre], system=sys)
gx_pre.delay = calc_duration(gx_parts[1])

gx_pre.delay = 0
pe_dur = calc_duration(gx_2)

###############################################################
# Create RF pulse
rf = make_block_pulse(flip_angle=alpha * np.pi / 180, duration=rf_dur * 1e-6, system=sys)
rf05 = rf
rf05.signal = 0.5 * rf.signal

###############################################################
# Calculate timing and phase encoding
areaZ = (np.arange(Nz) - Nz / 2) * delta_k[2]
areaY = (np.arange(Ny) - Ny / 2) * delta_k[1]

###############################################################
# Sequence blocks for steady state and data acquisition
start_time = time.time()

for index, pci in enumerate(pc, start=1):
    # Your code here
    print(index, pci)  # Example usage
    rf_phase_off = pci * np.pi / 180
    for _ in range(Nramp):
        rf.phase_offset = rf_phase_off
        adc.phase_offset = (rf_phase_off + np.pi / 2) % (2 * np.pi)
        seq.add_block(rf)
        seq.add_block(gx_1)
        seq.add_block(gx_2)

    for iZ in range(Nz):
        gz_pre = make_trapezoid(channel='z', area=areaZ[iZ], duration=prephase_min_dur, system=sys)
        gz_reph = make_trapezoid(channel='z', area=-areaZ[iZ], duration=prephase_min_dur, system=sys)
        for i in range(Ny):
            rf_phase_off = (rf_phase_off + pci * np.pi / 180) % (2 * np.pi)
            rf.phase_offset = rf_phase_off
            adc.phase_offset = (rf_phase_off + np.pi / 2) % (2 * np.pi)
            gy_pre = make_trapezoid(channel='y', area=-areaY[i], duration=prephase_min_dur, system=sys)
            gy_reph = make_trapezoid(channel='y', area=areaY[i], duration=prephase_min_dur, system=sys)
            seq.add_block(rf)
            seq.add_block(gx_1, gy_pre, gz_pre, adc)
            seq.add_block(gx_2, gy_reph, gz_reph)

###############################################################
# Check and output the sequence timing
ok, error_report = seq.check_timing()
if ok:
    print('Timing check passed successfully.')
else:
    print('Timing check failed! Error listing follows:')
    print(error_report)

###############################################################
# 
print('Sequence ready.')
receive_bw = 1 / (adc.dwell * Nx)
total_duration = seq.duration()[0]  # Use the first element of the tuple
TR = 1000 * total_duration / (len(pc) * (Ny * Nz + Nramp))
res = 1000 * fov / np.array([Nx, Ny, Nz])

print(TR, res, receive_bw)

end_time = time.time()
elapsed_time = end_time - start_time
print("Elapsed time:", elapsed_time, "seconds")

###############################################################
# Write the sequence
seq.set_definition('FOV', fov)
seq.set_definition('Name', 'trufi')

seq_name = 'pypulseq_TR3p98_BW641_FOV780x180x180_RE1x1x3_18PC_20240513';
seq.write(seq_name)